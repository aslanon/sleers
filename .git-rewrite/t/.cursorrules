// Screen Studio .cursorrules

// Genel İlkeler
- Uygulamanın masaüstü sürümü için Electron framework'ünü kullanın.
- Web sürümü için Nuxt.js framework'ünü kullanın.
- Kodlama standartları olarak ES6+ özelliklerini tercih edin.
- Modüler ve yeniden kullanılabilir bileşenler oluşturun.
- Asenkron işlemler için async/await yapısını kullanın.
- Hata yönetimi için try/catch bloklarını kullanın.
- Kodunuzu anlamlı ve açıklayıcı yorumlarla belgeleyin.

// Electron Uygulaması
- Electron'un en son kararlı sürümünü kullanın.
- Electron'un `BrowserWindow` özelliklerini kullanarak ana pencereyi oluşturun.
- Electron'un `ipcRenderer` ve `ipcMain` modüllerini kullanarak ana süreç ve renderer süreçleri arasında iletişimi sağlayın.
- Electron'un `app` ve `BrowserWindow` nesnelerini doğru şekilde yöneterek uygulamanın yaşam döngüsünü yönetin.
- Electron'un `Menu` ve `MenuItem` modüllerini kullanarak uygulama menüsünü oluşturun.
- Electron'un `dialog` modülünü kullanarak dosya açma ve kaydetme diyaloglarını yönetin.
- Electron'un `nativeImage` modülünü kullanarak uygulama simgesini ayarlayın.
- Electron'un `autoUpdater` modülünü kullanarak uygulama güncellemelerini yönetin.
- Electron'un `session` ve `webContents` özelliklerini kullanarak güvenlik önlemlerini alın.
- Electron'un `powerMonitor` ve `powerSaveBlocker` modüllerini kullanarak enerji yönetimini optimize edin.
- Electron'un `globalShortcut` modülünü kullanarak klavye kısayollarını tanımlayın.
- Electron'un `protocol` modülünü kullanarak özel protokoller oluşturun.
- Electron'un `screen` modülünü kullanarak ekran bilgilerini alın.
- Electron'un `clipboard` modülünü kullanarak panoya veri kopyalayın ve yapıştırın.
- Electron'un `shell` modülünü kullanarak sistem komutlarını çalıştırın.
- Electron'un `app` ve `BrowserWindow` nesnelerini doğru şekilde yöneterek uygulamanın yaşam döngüsünü yönetin.
- Electron'un `Menu` ve `MenuItem` modüllerini kullanarak uygulama menüsünü oluşturun.
- Electron'un `dialog` modülünü kullanarak dosya açma ve kaydetme diyaloglarını yönetin.
- Electron'un `nativeImage` modülünü kullanarak uygulama simgesini ayarlayın.
- Electron'un `autoUpdater` modülünü kullanarak uygulama güncellemelerini yönetin.
- Electron'un `session` ve `webContents` özelliklerini kullanarak güvenlik önlemlerini alın.
- Electron'un `powerMonitor` ve `powerSaveBlocker` modüllerini kullanarak enerji yönetimini optimize edin.
- Electron'un `globalShortcut` modülünü kullanarak klavye kısayollarını tanımlayın.
- Electron'un `protocol` modülünü kullanarak özel protokoller oluşturun.
- Electron'un `screen` modülünü kullanarak ekran bilgilerini alın.
- Electron'un `clipboard` modülünü kullanarak panoya veri kopyalayın ve yapıştırın.
- Electron'un `shell` modülünü kullanarak sistem komutlarını çalıştırın.
- Electron'un `app` ve `BrowserWindow` nesnelerini doğru şekilde yöneterek uygulamanın yaşam döngüsünü yönetin.
- Electron'un `Menu` ve `MenuItem` modüllerini kullanarak uygulama menüsünü oluşturun.
- Electron'un `dialog` modülünü kullanarak dosya açma ve kaydetme diyaloglarını yönetin.
- Electron'un `nativeImage` modülünü kullanarak uygulama simgesini ayarlayın.
- Electron'un `autoUpdater` modülünü kullanarak uygulama güncellemelerini yönetin.
- Electron'un `session` ve `webContents` özelliklerini kullanarak güvenlik önlemlerini alın.
- Electron'un `powerMonitor` ve `powerSaveBlocker` modüllerini kullanarak enerji yönetimini optimize edin.
- Electron'un `globalShortcut` modülünü kullanarak klavye kısayollarını tanımlayın.
- Electron'un `protocol` modülünü kullanarak özel protokoller oluşturun.
- Electron'un `screen` modülünü kullanarak ekran bilgilerini alın.
- Electron'un `clipboard` modülünü kullanarak panoya veri kopyalayın ve yapıştırın.
- Electron'un `shell` modülünü kullanarak sistem komutlarını çalıştırın.
- Electron'un `app` ve `BrowserWindow` nesnelerini doğru şekilde yöneterek uygulamanın yaşam döngüsünü yönetin.
- Electron'un `Menu` ve `MenuItem` modüllerini kullanarak uygulama menüsünü oluşturun.
- Electron'un `dialog` modülünü kullanarak dosya açma ve kaydetme diyaloglarını yönetin.
- Electron'un `nativeImage` modülünü kullanarak uygulama simgesini ayarlayın.
- Electron'un `autoUpdater` modülünü kullanarak uygulama güncellemelerini yönetin.
- Electron'un `session` ve `webContents` özelliklerini kullanarak güvenlik önlemlerini alın.
- Electron'un `powerMonitor` ve `powerSaveBlocker` modüllerini kullanarak enerji yönetimini optimize edin.
- Electron'un `globalShortcut` modülünü kullanarak klavye kısayollarını tanımlayın.
- Electron'un `protocol` modülünü kullanarak özel protokoller oluşturun.
- Electron'un `screen` modülünü kullanarak ekran bilgilerini alın.
- Electron'un `clipboard` modülünü kullanarak panoya veri kopyalayın ve yapıştırın.
- Electron'un `shell` modülünü kullanarak sistem komutlarını çalıştırın.
- Electron'un `app` ve `BrowserWindow` nesnelerini doğru şekilde yöneterek uygulamanın yaşam döngüsünü yönetin.
- Electron'un `Menu` ve `MenuItem` modüllerini kullanarak uygulama menüsünü oluşturun.

 

You are an expert software architect tasked with creating comprehensive rules for Cursor AI to follow when working with sleer. 

# Cursor AI Rules for sleer

## Project Overview
similar of screen.studio

## Project Context
This document defines the rules and guidelines for Cursor AI when working with sleer.

### Technical Stack
- Platform: desktop
- Framework: electron
- Key Dependencies:

- expo-ui

- expo-router

- expo-auth

- expo-image

- expo-location

- expo-notifications

- expo-storage

- expo-updates

- tailwind-electron

- electron-store

- electron-builder

- electron-updater

- electron-log

- electron-contextmenu

- electron-window-state

- electron-reload

- electron-dl

- electron-is-dev

- electron-serve

- electron-debug


## Code Generation Rules

### 1. Project Structure
Follow these directory and file organization rules:
- Maintain the established project structure
- Place components in appropriate directories
- Follow file naming conventions
- Respect module boundaries
- Keep related files together

### 2. Code Style
Adhere to these formatting rules:
- Use consistent indentation
- Follow line length limits
- Apply proper spacing
- Use appropriate brackets
- Maintain consistent naming
- Follow TypeScript best practices

### 3. Component Guidelines
When generating components:
- Follow component composition patterns
- Implement proper prop typing
- Use appropriate state management
- Handle errors correctly
- Implement proper event handling
- Follow lifecycle best practices
- Optimize rendering performance

### 4. Type System
For TypeScript implementation:
- Use strict type checking
- Create proper interfaces
- Implement generics correctly
- Handle null/undefined properly
- Use type guards when needed
- Document complex types
- Avoid any type

### 5. API Integration
When working with APIs:
- Follow RESTful conventions
- Implement proper error handling
- Use type-safe requests
- Handle authentication correctly
- Validate API responses
- Document API usage
- Implement proper caching

### 6. State Management
For managing application state:
- Use appropriate state solutions
- Follow immutability principles
- Implement proper actions/reducers
- Handle side effects correctly
- Optimize state updates
- Document state structure
- Implement proper selectors

### 7. Testing Requirements
Generate tests following these rules:
- Write comprehensive unit tests
- Implement integration tests
- Follow testing best practices
- Use proper mocking
- Test error scenarios
- Maintain test coverage
- Document test cases

### 8. Security Guidelines
Enforce security practices:
- Validate all inputs
- Sanitize data output
- Handle authentication properly
- Protect sensitive data
- Follow OWASP guidelines
- Implement proper CORS
- Use secure dependencies

### 9. Performance Rules
Optimize for performance:
- Implement code splitting
- Use lazy loading
- Optimize bundle size
- Minimize re-renders
- Use proper caching
- Optimize assets
- Follow performance best practices

### 10. Documentation
Generate documentation that:
- Is clear and concise
- Includes JSDoc comments
- Provides usage examples
- Documents edge cases
- Explains complex logic
- Includes type information
- Follows documentation standards




## Best Practices

### 1. Code Quality
- Write self-documenting code
- Keep functions small and focused
- Follow DRY principles
- Use meaningful names
- Implement proper error handling
- Write maintainable code

### 2. Performance
- Optimize bundle size
- Implement code splitting
- Use proper caching
- Optimize rendering
- Follow lazy loading patterns

### 3. Security
- Validate user input
- Sanitize data output
- Use proper authentication
- Protect sensitive data
- Follow security best practices
